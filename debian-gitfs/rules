#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.

# Uncomment this to turn on verbose mode.
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

%:
	dh $@

override_dh_auto_configure:
	# Skip pydistutils.cfg creation to avoid conflicts with pip

override_dh_auto_build:
	# Build a self-contained pex without invoking upstream Makefile (no uv in chroot)
	mkdir -p build/src build/wheels
	# Create a clean copy of the source, excluding venvs and build artifacts that break pex hashing
	tar -C $(CURDIR) \
		--exclude=./debian \
		--exclude=./build \
		--exclude=./.git \
		--exclude=./.venv \
		--exclude=./test_venv \
		-cf - . | tar -C build/src -xf -
	# Create a virtual environment for build dependencies
	python3 -m venv $(CURDIR)/build/venv
	# Upgrade pip to ensure wheel support
	$(CURDIR)/build/venv/bin/pip install --upgrade --no-index --find-links=$(CURDIR)/debian/packages pip setuptools wheel
	# Manually unpack and install wheel files into the venv using Python's zipfile
	$(CURDIR)/build/venv/bin/python3 -c "import os; import zipfile; import shutil; from pathlib import Path; packages_dir = Path('$(CURDIR)/debian/packages'); site_packages = Path('$(CURDIR)/build/venv/lib/python3.12/site-packages'); [print(f'Unpacking {wheel_path.name}') or zipfile.ZipFile(wheel_path, 'r').extractall(site_packages) or print(f'Installed {wheel_path.name}') for wheel_path in packages_dir.glob('*.whl')]"
	# Also ensure flit-core is available for building
	$(CURDIR)/build/venv/bin/pip install --no-index --find-links=$(CURDIR)/debian/packages flit-core || true
	# Build all source packages to wheels first
	for pkg in $(CURDIR)/debian/packages/*.tar.gz; do \
		if [ -f "$$pkg" ]; then \
			echo "Building wheel for $$pkg"; \
			$(CURDIR)/build/venv/bin/pip wheel --no-deps --no-index --no-build-isolation \
				--find-links=$(CURDIR)/debian/packages \
				--wheel-dir=$(CURDIR)/build/wheels "$$pkg" || true; \
		fi; \
	done
	# Copy existing wheels to build/wheels
	cp $(CURDIR)/debian/packages/*.whl $(CURDIR)/build/wheels/ || true
	# Pre-build the gitfs wheel using pip with build deps available
	export HOME=$(CURDIR) && \
		$(CURDIR)/build/venv/bin/pip wheel --no-deps --no-index --no-build-isolation \
		--find-links=$(CURDIR)/build/wheels \
		--wheel-dir=$(CURDIR)/build/wheels build/src
	# Now build the pex from the wheels only (no source distributions)
	# First, manually install atomiclong and fusepy which failed to build as wheels
	cd $(CURDIR)/debian/packages && tar xzf atomiclong-0.1.1.tar.gz && \
		cd atomiclong-0.1.1 && \
		$(CURDIR)/build/venv/bin/python3 setup.py bdist_wheel --dist-dir=$(CURDIR)/build/wheels || true
	cd $(CURDIR)/debian/packages && tar xzf mfusepy-1.1.0.tar.gz && \
		cd mfusepy-1.1.0 && \
		sed -i 's/license = "ISC"/license = {text = "ISC"}/' pyproject.toml && \
		$(CURDIR)/build/venv/bin/python3 -m pip wheel --no-deps --no-index --wheel-dir=$(CURDIR)/build/wheels . || true
	# Use pex with pre-populated pip/setuptools/wheel to avoid bootstrapping
	export HOME=$(CURDIR) && \
		cp $(CURDIR)/build/wheels/pip*.whl $(CURDIR)/build/wheels/pip-23.2-py3-none-any.whl || true && \
		cp $(CURDIR)/build/wheels/setuptools*.whl $(CURDIR)/build/wheels/setuptools-68.0.0-py3-none-any.whl || true && \
		cp $(CURDIR)/build/wheels/wheel*.whl $(CURDIR)/build/wheels/wheel-0.40.0-py3-none-any.whl || true && \
		/usr/bin/pex -v --disable-cache --no-pypi \
		--pip-version 23.2 \
		--setuptools-version 68.0.0 \
		--wheel-version 0.40.0 \
		--no-build \
		--pex-root=$(CURDIR)/build \
		--find-links=$(CURDIR)/build/wheels \
		gitfs atomiclong cffi mfusepy pycparser pygit2 sentry-sdk \
		-m gitfs:mount -o build/gitfs

override_dh_auto_install:
	mkdir -p debian/gitfs/usr/bin
	install -m 0755 build/gitfs debian/gitfs/usr/bin/gitfs

override_dh_auto_test:
